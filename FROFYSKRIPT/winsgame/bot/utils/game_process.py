from aiogram.types import Message

from settings import coefs
from bot.utils import func, text
from settings.constants import knb
import asyncio, random

class GameProcess:
    def __init__(self, amount, asset, coef, user_id, username) -> None:
        self.amount = amount
        self.asset = asset
        self.coef = coef
        self.id = user_id
        self.username = username

    async def basketball_process(self, message: Message, type = "goal"):
        msg = await message.answer_dice('üèÄ')
        await asyncio.sleep(4)
        v=msg.dice.value
        if type == "goal":
            if v==4 or v==5:
                self.coef += coefs.BASKET
                await func.winner(message, self.amount, self.asset, self.coef, self.id, self.username, "–±–∞—Å–∫–µ—Ç–±–æ–ª –ø–æ–ø–∞–ª")
            else:
                await func.looser(message, "–±–∞—Å–∫–µ—Ç–±–æ–ª –Ω–µ –ø–æ–ø–∞–ª")
        else:
            self.coef += coefs.BASKET_MISS
            if v==3 or v==1 or v==2:
                await func.winner(message, self.amount, self.asset, self.coef, self.id, self.username, "–±–∞—Å–∫–µ—Ç–±–æ–ª –Ω–µ –ø–æ–ø–∞–ª")
            else:
                await func.looser(message, "–±–∞—Å–∫–µ—Ç–±–æ–ª –ø–æ–ø–∞–ª")
    
    async def footaball_process(self, message: Message, type = "goal"):
        msg = await message.answer_dice('‚öΩ')
        await asyncio.sleep(5)
        v=msg.dice.value
        if type == "goal":
            self.coef += coefs.FOOTBALL
            if v==4 or v==5 or v==3:
                await func.winner(message, self.amount, self.asset, self.coef, self.id, self.username, "—Ñ—É—Ç–±–æ–ª –ø–æ–ø–∞–ª")
            else:
                await func.looser(message, "—Ñ—É—Ç–±–æ–ª –Ω–µ –ø–æ–ø–∞–ª")
        else:
            self.coef += coefs.FOOTBALL_MISS
            if v==1 or v==2:
                await func.winner(message, self.amount, self.asset, self.coef, self.id, self.username, "—Ñ—É—Ç–±–æ–ª –ø–æ–ø–∞–ª")
            else:
                await func.looser(message, "—Ñ—É—Ç–±–æ–ª –Ω–µ –ø–æ–ø–∞–ª")

    async def darts_procces(self, message: Message, type = 'center'):
        msg = await message.answer_dice('üéØ')
        await asyncio.sleep(4)
        v=msg.dice.value
        if type == "w":
            self.coef += coefs.DARTS_COLOR
            if v==3 or v==5:
                await func.winner(message, self.amount, self.asset, self.coef, self.id, self.username, "–¥–∞—Ä—Ç—Å –±–µ–ª–æ–µ")
            elif v == 6:
                await func.looser(message, "–¥–∞—Ä—Ç—Å —Ü–µ–Ω—Ç—Ä")
            elif v == 1:
                await func.looser(message, "–¥–∞—Ä—Ç—Å –º–∏–º–æ")
            else:
                await func.looser(message, "–¥–∞—Ä—Ç—Å –∫—Ä–∞—Å–Ω–æ–µ")
        elif type == "r":
            self.coef += coefs.DARTS_COLOR
            if v==4 or v==2:
                await func.winner(message, self.amount, self.asset, self.coef, self.id, self.username, "–¥–∞—Ä—Ç—Å –∫—Ä–∞—Å–Ω–æ–µ")
            elif v == 6:
                await func.looser(message, "–¥–∞—Ä—Ç—Å —Ü–µ–Ω—Ç—Ä")
            elif v == 1:
                await func.looser(message, "–¥–∞—Ä—Ç—Å –º–∏–º–æ")
            else:
                await func.looser(message, "–¥–∞—Ä—Ç—Å –±–µ–ª–æ–µ")
        elif type == "miss":
            self.coef += coefs.DARTS
            if v == 1:
                await func.winner(message, self.amount, self.asset, self.coef, self.id, self.username, "–¥–∞—Ä—Ç—Å –º–∏–º–æ")
            elif v==3 or v==5:
                await func.looser(message, "–¥–∞—Ä—Ç—Å –±–µ–ª–æ–µ")
            elif v==4 or v==2:
                await func.looser(message, "–¥–∞—Ä—Ç—Å –∫—Ä–∞—Å–Ω–æ–µ")
            else:
                await func.looser(message, "–¥–∞—Ä—Ç—Å —Ü–µ–Ω—Ç—Ä")
        else:
            self.coef += coefs.DARTS
            if v==6:
                await func.winner(message, self.amount, self.asset, self.coef, self.id, self.username,  "–¥–∞—Ä—Ç—Å —Ü–µ–Ω—Ç—Ä")
            elif v==3 or v==5:
                await func.looser(message, "–¥–∞—Ä—Ç—Å –±–µ–ª–æ–µ")
            elif v==4 or v==2:
                await func.looser(message, "–¥–∞—Ä—Ç—Å –∫—Ä–∞—Å–Ω–æ–µ")
            elif v == 1:
                await func.looser(message, "–¥–∞—Ä—Ç—Å –º–∏–º–æ")

    async def dice_procces(self, message: Message, type, n = None):
        msg = await message.answer_dice('üé≤')
        await asyncio.sleep(4)
        v = msg.dice.value
        if type == "number":
            self.coef += coefs.DICE_NUMBER
            if n == v:
                await func.winner(message, self.amount, self.asset, self.coef, self.id, self.username,  f"–ü–æ–±–µ–¥–∞! –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {v}.", photo="dice_guesed.jpg", type='c')
            else:
                await func.looser(message, f"–ü—Ä–æ–∏–≥—Ä—ã—à! –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {v}. –í—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏!", type='c')
        elif type == "even":
            self.coef += coefs.DICE
            if v == 2 or v == 4 or v==6:
                await func.winner(message, self.amount, self.asset, self.coef, self.id, self.username, f"–ü–æ–±–µ–¥–∞! –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {v}.", photo="dice_even.jpg", type='c')
            else:
                await func.looser(message, f"–ü—Ä–æ–∏–≥—Ä—ã—à! –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {v}.", photo="dice_odd.jpg", type='c')
        elif type == "odd":
            self.coef += coefs.DICE
            v = msg.dice.value
            if v == 1 or v == 3 or v==5:
                await func.winner(message, self.amount, self.asset, self.coef, self.id, self.username, f"–ü–æ–±–µ–¥–∞! –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {v}.", photo="dice_odd.jpg", type='c')
            else:
                await func.looser(message, f"–ü—Ä–æ–∏–≥—Ä—ã—à! –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {v}.", photo="dice_even.jpg", type='c')
        elif type == "more":
            self.coef += coefs.DICE_MORE_LESS
            v = msg.dice.value
            v= msg.dice.value
            if v == 4 or v == 5 or v==6:
                await func.winner(message,  self.amount, self.asset, self.coef, self.id, self.username, f"–ü–æ–±–µ–¥–∞! –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {v}.", photo="dice_more.jpg", type='c')
            else:
                await func.looser(message, f"–ü—Ä–æ–∏–≥—Ä—ã—à! –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {v}.", photo="dice_less.jpg", type='c')
        elif type == "less":
            self.coef += coefs.DICE_MORE_LESS
            v = msg.dice.value
            v= msg.dice.value
            if v == 1 or v == 2 or v==3:
                await func.winner(message, self.amount, self.asset, self.coef, self.id, self.username, f"–ü–æ–±–µ–¥–∞! –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {v}.", photo="dice_less.jpg", type='c')
            else:
                await func.looser(message, f"–ü—Ä–æ–∏–≥—Ä—ã—à! –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {v}.", photo="dice_more.jpg", type='c')

    async def duel_number_process(self, message: Message, num, game = 'üé≤', textes = ["–ø–µ—Ä–≤–æ–≥–æ –∫—É–±–∏–∫–∞", "–≤—Ç–æ—Ä–æ–≥–æ –∫—É–±–∏–∫–∞"]):
        self.coef += coefs.DUEL
        while True:
            cub1 = await message.answer_dice(game)
            cub2 = await message.answer_dice(game)
            if num == 1: 
                msguser = cub1
                msgbot = cub2
            else:
                msguser = cub2
                msgbot = cub1
            await asyncio.sleep(4)
            if msguser.dice.value > msgbot.dice.value:
                if num == 1:
                    photo = 'dice_1.jpg' if game == 'üé≤' else "win.jpg"
                    await func.winner(message, self.amount, self.asset, self.coef, self.id, self.username, f"–ü–æ–±–µ–¥–∞! –ò–≥—Ä–∞ –ø—Ä–æ—à–ª–∞ —Å–æ —Å—á—ë—Ç–æ–º [{msguser.dice.value}:{msgbot.dice.value}] –≤ –ø–æ–ª—å–∑—É {textes[0]}.", photo, 'c')
                else:
                    photo = 'dice_2.jpg' if game == 'üé≤' else "win.jpg"
                    await func.winner(message, self.amount, self.asset, self.coef, self.id, self.username, f"–ü–æ–±–µ–¥–∞! –ò–≥—Ä–∞ –ø—Ä–æ—à–ª–∞ —Å–æ —Å—á—ë—Ç–æ–º [{msgbot.dice.value}:{msguser.dice.value}] –≤ –ø–æ–ª—å–∑—É {textes[1]}.", photo, 'c')
                break
            elif msguser.dice.value == msgbot.dice.value:
                await message.reply("*‚ö°–ù–∏—á—å—è! –ò–≥—Ä–∞–µ–º –µ—â—ë —Ä–∞–∑!*", 'markdown')
                await asyncio.sleep(2)
            elif msguser.dice.value < msgbot.dice.value:
                if num == 1:
                    photo = 'dice_2.jpg' if game == 'üé≤' else "lose.jpg"
                    await func.looser(message,f"–ü—Ä–æ–∏–≥—Ä—ã—à! –ò–≥—Ä–∞ –ø—Ä–æ—à–ª–∞ —Å–æ —Å—á—ë—Ç–æ–º [{msguser.dice.value}:{msgbot.dice.value}] –≤ –ø–æ–ª—å–∑—É {textes[1]}.", photo, 'c')
                else:
                    photo = 'dice_1.jpg' if game == 'üé≤' else "lose.jpg"
                    await func.looser(message, f"–ü—Ä–æ–∏–≥—Ä—ã—à! –ò–≥—Ä–∞ –ø—Ä–æ—à–ª–∞ —Å–æ —Å—á—ë—Ç–æ–º [{msgbot.dice.value}:{msguser.dice.value}] –≤ –ø–æ–ª—å–∑—É {textes[0]}.",  photo, 'c')
                break
    
    async def duel_proccess(self, message: Message, game = 'üé≤', textes = ["–ø–µ—Ä–≤–æ–≥–æ –∫—É–±–∏–∫–∞", "–≤—Ç–æ—Ä–æ–≥–æ –∫—É–±–∏–∫–∞"], win_photos = ['dice_1.jpg','dice_2.jpg']):
        self.coef += coefs.DUEL
        while True:
            msgbot = await message.answer_dice(game)
            msguser = await message.answer_dice(game)
            await asyncio.sleep(4)
            if msguser.dice.value > msgbot.dice.value:
                await func.winner(message, self.amount, self.asset, self.coef, self.id, self.username, f"–ü–æ–±–µ–¥–∞! –ò–≥—Ä–∞ –ø—Ä–æ—à–ª–∞ —Å–æ —Å—á—ë—Ç–æ–º [{msgbot.dice.value}:{msguser.dice.value}] –≤ –ø–æ–ª—å–∑—É {textes[1]}.", win_photos[1], 'c')
                break
            elif msguser.dice.value == msgbot.dice.value:
                await message.reply("*‚ö°–ù–∏—á—å—è! –ò–≥—Ä–∞–µ–º –µ—â—ë —Ä–∞–∑!*", 'markdown')
                await asyncio.sleep(2)
            elif msguser.dice.value < msgbot.dice.value:
                await func.looser(message, f"–ü—Ä–æ–∏–≥—Ä—ã—à! –ò–≥—Ä–∞ –ø—Ä–æ—à–ª–∞ —Å–æ —Å—á—ë—Ç–æ–º [{msgbot.dice.value}:{msguser.dice.value}] –≤ –ø–æ–ª—å–∑—É {textes[0]}.",  win_photos[0], 'c')
                break
    
    async def bowling_process(self, message: Message, stake):
        msg = await message.answer_dice('üé≥')
        v=msg.dice.value
        self.coef += coefs.BOWLING
        await asyncio.sleep(5)
        if stake == 0:
            if v==6:
                await func.winner(message, self.amount, self.asset, self.coef, self.id, self.username, "–±–æ—É–ª–∏–Ω–≥ 0")
            else:
                await func.looser(message, text.get_bowling_text(v))
        elif stake == 1:
            if v==5:
                await func.winner(message, self.amount, self.asset, self.coef, self.id, self.username, "–±–æ—É–ª–∏–Ω–≥ 1")
            else:
                await func.looser(message, text.get_bowling_text(v))
        elif stake == 2:
            if v == 4:
                await func.winner(message, self.amount, self.asset, self.coef, self.id, self.username, "–±–æ—É–ª–∏–Ω–≥ 2")
            else:
                await func.looser(message, text.get_bowling_text(v))
        elif stake == 3:
            if v == 3:
                await func.winner(message, self.amount, self.asset, self.coef, self.id, self.username, "–±–æ—É–ª–∏–Ω–≥ 3")
            else:
                await func.looser(message, text.get_bowling_text(v))
        elif stake == 5:
            if v == 2:
                await func.winner(message, self.amount, self.asset, self.coef, self.id, self.username, "–±–æ—É–ª–∏–Ω–≥ 5")
            else:
                await func.looser(message, text.get_bowling_text(v))
        elif stake == 6:
            if v == 1:
                await func.winner(message, self.amount, self.asset, self.coef, self.id, self.username, "–±–æ—É–ª–∏–Ω–≥ —Å—Ç—Ä–∞–π–∫")
            else:
                await func.looser(message, text.get_bowling_text(v))

    async def knb_procces(self, message: Message, stake):
        if stake == "–∫–∞–º–µ–Ω—å":
            hand = '‚úäüèª'
        elif stake == "–±—É–º–∞–≥–∞":
            hand = 'üëãüèª'
        elif stake == "–Ω–æ–∂–Ω–∏—Ü—ã":
            hand = '‚úåüèª'
        await message.answer(hand)
        await asyncio.sleep(2)
        while True:
            bothand = random.choice(knb)
            await message.answer(bothand)
            if (bothand == '‚úäüèª' and hand == 'üëãüèª') or (bothand == 'üëãüèª' and hand == '‚úåüèª') or (bothand == '‚úåüèª' and hand == '‚úäüèª'):
                await func.winner(message, self.amount, self.asset, self.coef, self.id, self.username, stake)
                break
            elif bothand == hand:
                await message.reply("*‚ö°–ù–∏—á—å—è! –ë–æ—Ç —Å–Ω–æ–≤–∞ —Ö–æ–¥–∏—Ç!*", 'markdown')    
            else:
                await func.looser(message, "–ü—Ä–æ–∏–≥—Ä—ã—à! –°–æ–ø–µ—Ä–Ω–∏–∫ –ø–µ—Ä–µ–∏–≥—Ä–∞–ª –≤–∞—Å –≤ –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞!", type='knb')
                break  


