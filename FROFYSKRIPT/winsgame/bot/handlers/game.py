from aiogram.types import Message, ChatType
from aiogram.dispatcher.filters import ChatTypeFilter
from aiogram import Dispatcher
from aiogram.utils.deep_linking import decode_payload, get_start_link

from settings import keywords, coefs
from settings.constants import knb
from bot.utils import func, text, game_process
from bot.utils.cryptopay import get_balance, crypto
import asyncio, config, main, random
from bot import keyboards

#–û–°–¢–û–†–û–ñ–ù–û –í–ù–ò–ó–£ –ì–ê–í–ù–û–ö–û–î ‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì
async def getter(msg_query: Message):
    """–ü–∏–∑–¥–µ—Ü"""
    if msg_query.chat.id == config.CHANNEL_BROKER: #–ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –≤ –∫–∞–Ω–∞–ª–µ –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–µ
        if msg_query.entities: #–ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ entities
            amount = float(msg_query.text.split("–æ—Ç–ø—Ä–∞–≤–∏–ª(–∞)")[1].split()[0].replace(',', "")) #–ø–æ–ª—É—á–∞–µ–º —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏
            name = msg_query.text.split("–æ—Ç–ø—Ä–∞–≤–∏–ª(–∞)")[0] #–ø–æ–ª—É—á–∞–µ–º –∏–º—è —á–µ–ª–∞
            if msg_query.entities[0].user: #–ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–µ–ª–∞
                user = msg_query.entities[0].user
                username = f"@{user.username}" if user.username else user.full_name
                name = user.full_name #—Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∞–µ–º –∏–º—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
                msg_text = msg_query.text.removeprefix(name) #—É–¥–∞–ª—è–µ–º –∏–º—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –≥—Ä–µ—Ö–∞ –ø–æ–¥–∞–ª—å—à–µ
                user_id = int(user.id)
                asset =  msg_text.split("–æ—Ç–ø—Ä–∞–≤–∏–ª(–∞)")[1].split()[1]
                amount = float(msg_text.split("–æ—Ç–ø—Ä–∞–≤–∏–ª(–∞)")[1].split()[0].replace(',', "")) #–ø–æ–ª—É—á–∞–µ–º —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –Ω–∞–¥–µ–∂–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
                if user_id not in main.db.get_bannned(): #–ø—Ä–æ–≤–µ–∫–∞ —á—Ç–æ–±—ã —á–µ–ª –Ω–µ –±—ã–ª –≤ –±–∞–Ω–µ
                    if "üí¨ " in msg_query.text: #–ø—Ä–æ–≤–µ—Ä—è–º–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–µ–Ω—Ç–∞
                        coef = 0
                        if "da;dladla;da;" in name.lower(): #—É–≤–µ–ª–∏—á–≤–∞–µ–º –∫—ç—Ñ –µ—Å–ª–∏ —É —á–µ–ª–∞ –≤ –Ω–∏–∫–µ tonbet
                            coef += 0.05
                        old_comment = msg_query.text.split("üí¨ ")[1]
                        comment = old_comment.lower()
                        comment = comment.replace('—ë', '–µ') 
                        await asyncio.sleep(4)
                        await main.bot.send_message(config.MAIN_CHANNEL, "[‚úÖ] –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!")
                        message = await main.bot.send_message(config.MAIN_CHANNEL, text.get_stake(amount, asset, comment, name), 'html')
                        gp = game_process.GameProcess(amount, asset, coef, user_id, username)
                        if not main.db.users_exists(user_id):
                            main.db.add_user(user_id)
                            main.db.set_active(user_id, 0)
                        main.db.edit_total(user_id, 1)
                        amount_for_moneyback = amount if asset == "USDT" else amount * 2.8
                        main.db.edit_moneyback(user_id, amount_for_moneyback*config.MONEYBACK)
                        if func.contains(keywords.DICE, comment):
                            new_com = func.remove_prefixes(keywords.DICE, comment)
                            if new_com.isdigit() and new_com != "456" and new_com != "123" and new_com != "321" and new_com != "654" and new_com != "246" and new_com != "135":
                                    coef += coefs.DICE_NUMBER
                                    n = int(new_com)
                                    if 0 < n < 7:
                                       await gp.dice_procces(message, 'number', n)
                                    else:
                                        await func.invalid_syntax(message, amount, asset, user_id, username, name)
                            elif func.equals(keywords.EVEN, new_com):
                                await gp.dice_procces(message, 'even')
                            elif func.equals(keywords.ODD, new_com):
                                await gp.dice_procces(message, 'odd')
                            elif func.equals(keywords.MORE, new_com):
                                await gp.dice_procces(message, 'more')
                            elif func.equals(keywords.LESS, new_com):
                                await gp.dice_procces(message, 'less')
                            elif "–¥—É—ç–ª—å " in new_com:
     
                                num = new_com.split()[1]
                                if num.isdigit():
                                    num = int(num)
                                    if 0 < num < 3:
                                        await gp.duel_number_process(message, num)
                                    else:
                                        await func.invalid_syntax(message, amount, asset, user_id, username, name)
                                else:
                                    await func.invalid_syntax(message, amount, asset, user_id, username, name)
                            elif new_com == "–¥—É—ç–ª—å":
                                await gp.duel_proccess(message)
                            else:
                                await func.invalid_syntax(message, amount, asset, user_id, username, name)
                        elif func.contains(keywords.DARTS, comment):
                            new_com = func.remove_prefixes(keywords.DARTS, comment)
                            if func.equals(keywords.RED, new_com):
                                await gp.darts_procces(message, 'r')
                            elif func.equals(keywords.WHITE, new_com):
                                await gp.darts_procces(message, 'w')
                            elif func.equals(keywords.CENTER, new_com):
                                await gp.darts_procces(message)
                            elif func.equals(keywords.MISS, new_com):
                                await gp.darts_procces(message, 'miss')
                            elif "–¥—É—ç–ª—å " in new_com:
                                coef += coefs.DUEL
                                num = new_com.split()[1]
                                if num.isdigit():
                                    num = int(num)
                                    if 0 < num < 3:
                                        await gp.duel_number_process(message, num, 'üéØ', ['–ø–µ—Ä–≤–æ–≥–æ –¥—Ä–æ—Ç–∏–∫–∞', '–≤—Ç–æ—Ä–æ–≥–æ –¥—Ä–æ—Ç–∏–∫–∞'])
                            elif new_com == "–¥—É—ç–ª—å":
                                await gp.duel_proccess(message, 'üéØ', ['–ø–µ—Ä–≤–æ–≥–æ –¥—Ä–æ—Ç–∏–∫–∞', '–≤—Ç–æ—Ä–æ–≥–æ –¥—Ä–æ—Ç–∏–∫–∞'], ['lose.jpg', 'win.jpg'])
                            else:
                                await func.invalid_syntax(message, amount, asset, user_id, username, name)
                        elif func.contains(keywords.BASKET, comment):
                                new_com = func.remove_prefixes(keywords.BASKET, comment)
                                if func.equals(keywords.GOAL, new_com):
                                    await gp.basketball_process(message)
                                elif func.equals(keywords.MISS, new_com):
                                    await gp.basketball_process(message, 'miss')
                                else:
                                    await func.invalid_syntax(message, amount, asset, user_id, username, name)
                        elif func.contains(keywords.FOOTBALL, comment):
                            new_com = func.remove_prefixes(keywords.FOOTBALL, comment)
                            if func.equals(keywords.GOAL, new_com):
                                await gp.footaball_process(message)
                            elif func.equals(keywords.MISS, new_com):
                                await gp.footaball_process(message, 'miss')
                            else:
                                await func.invalid_syntax(message, amount, asset, user_id, username, name)
                        elif func.contains(keywords.BOWLING, comment):
                            new_com = func.remove_prefixes(keywords.BOWLING, comment)
                            if new_com.isdigit():
                                stake = int(new_com)
                                if -1 < stake < 7:
                                    await gp.bowling_process(message, stake)
                            elif func.equals(keywords.STRIKE, new_com):
                                await gp.bowling_process(message, 0)
                            else:
                                await func.invalid_syntax(message, amount, asset, user_id, username, name)
                        elif "–º–∏–Ω—ã " in comment:
                            if not main.db.user_played_mines(user_id):
                                new_com = comment
                                new_com = new_com.removeprefix("–º–∏–Ω—ã ")
                                if new_com.isdigit():
                                    n = int(int(new_com))
                                    if 25 > n > 2:
                                        c = 0
                                        coef += 1
                                        await message.reply(f"*‚ö°–í—ã–±–µ—Ä–µ—Ç–µ –ª—é–±–æ–π —Å–ª–æ—Ç*\n*–ö–ª–µ—Ç–æ–∫ –æ—Ç–∫—Ä—ã—Ç–æ:* 0\n*–ö–æ—ç—Ñ—Ñ–∏—Ü–µ–Ω—Ç:* 1X\n*–í—ã–∏–≥—Ä—ã—à:* {round(amount * coef, 2)}  {asset}", 'markdown', reply_markup=keyboards.functional.create_mine_keyboards(n, user_id, amount, asset, username))
                                    else:
                                        await func.invalid_syntax(message, amount, asset, user_id, username, name)
                                else:
                                    await func.invalid_syntax(message, amount, asset, user_id, username, name)
                            else:
                                if amount < dict(await get_balance())[asset]:
                                    if amount < 1:
                                        check = await crypto.create_check(asset, amount - amount * 0.1)
                                        main.db.add_check(user_id, check.check_id)
                                        msag = await message.reply("<b>‚ùó–í—ã –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â—É—é –∏–≥—Ä—É</b>\n\n<blockquote><b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏ c –∫–æ–º–∏—Å—Å–∏–µ–π 10%!</b></blockquote>", 'html', reply_markup=keyboards.functional.create_url_button(await get_start_link(user_id, True), "–í–µ—Ä–Ω—É—Ç—åüí∏"))
                                    else:
                                        await crypto.transfer(user_id, asset, amount - amount * 0.1, text.rnd_id())
                                        msag = await message.reply("<b>‚ùó–í—ã –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â—É—é –∏–≥—Ä—É</b>\n\n<blockquote><b>–î–µ–Ω—å–≥–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å c –∫–æ–º–∏—Å—Å–∏–µ–π 10%!</b></blockquote>", 'html')
                                else:
                                    msag = await message.reply("*‚ùó–í—ã –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â—É—é –∏–≥—Ä—É*\n\n<blockquote>–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤!</blockquote>", 'markdown')
                                await asyncio.sleep(20)
                                await msag.delete()
                        else:
                            if func.equals(keywords.EVEN, comment):
                                await gp.dice_procces(message, 'even')
                            elif func.equals(keywords.ODD, comment):
                                await gp.dice_procces(message, 'odd')
                            elif func.equals(keywords.RED, comment):
                                await gp.darts_procces(message, 'r')
                            elif func.equals(keywords.WHITE, comment):
                                await gp.darts_procces(message, 'w')
                            elif func.equals(keywords.DARTS, comment) or func.equals(keywords.CENTER, comment):
                                await gp.darts_procces(message)
                            elif func.equals(keywords.BASKET, comment):
                                await gp.basketball_process(message)
                            elif func.equals(keywords.FOOTBALL, comment):
                                await gp.footaball_process(message)
                            elif func.equals(keywords.BOWLING, comment) or func.equals(keywords.STRIKE, comment):
                                await gp.bowling_process(message, 0)
                            elif func.equals(keywords.SLOTS, comment):
                                msg = await message.answer_dice('üé∞')
                                v = msg.dice.value
                                await asyncio.sleep(6)
                                if v == 64:
                                    await func.winner(message, amount, asset, coefs.SLOTS_777 + coef, user_id, username, "–ü–æ–±–µ–¥–∞! –í—ã –≤—ã–±–∏–ª–∏ —Ç—Ä–∏ –≤ —Ä—è–¥!", type="cas") #777
                                elif v == 1 or v==22:
                                    await func.winner(message, amount, asset, coefs.SLOTS_GRAPE + coef, user_id,  username, "–ü–æ–±–µ–¥–∞! –í—ã –≤—ã–±–∏–ª–∏ —Ç—Ä–∏ –≤ —Ä—è–¥!", type="cas") #bar and grape
                                elif v == 43:
                                    await func.winner(message, amount, asset, coefs.SLOTS_LEMON + coef, user_id, username, "–ü–æ–±–µ–¥–∞! –í—ã –≤—ã–±–∏–ª–∏ —Ç—Ä–∏ –≤ —Ä—è–¥!", type="cas")
                                else:
                                    await func.looser(message, "–ü—Ä–æ–∏–≥—Ä—ã—à! –í—ã –Ω–µ –≤—ã–±–∏–ª–∏ —Ç—Ä–∏ –≤ —Ä—è–¥!", type = "cas")
                            elif comment in ["–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã", "–±—É–º–∞–≥–∞"]:
                                await gp.knb_procces(message, comment)
                            else:
                                await func.invalid_syntax(message, amount, asset, user_id, username, name)
                    else:
                        #–µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–º–µ–Ω—Ç–∞
                        message = await main.bot.send_message(config.MAIN_CHANNEL, text.get_stake(amount, asset, '‚ùå', name), 'html')
                        await func.invalid_syntax(message, amount, asset, user_id, username, name)
                        await asyncio.sleep(20)
                        await message.delete()
                else:
                    #–µ—Å–ª–∏ –±–∞–Ω
                    await main.bot.send_message(config.LOG_CHANNEL, f"–ó–∞–±–∞–Ω–Ω–µ–Ω—ã–π {username}({user_id}) –æ—Ç–ø—Ä–∞–≤–∏–ª {amount} {asset}")
            else:
                #–µ—Å–ª–∏ –Ω–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞–∫–∫
                await main.bot.send_message(config.LOG_CHANNEL, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–º–µ–Ω–µ–º {name}! –ï–≥–æ —Å—Ç–∞–≤–∫–∞ {amount} {asset}")
                masage = await main.bot.send_message(config.MAIN_CHANNEL, f"‚ùó–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –æ–ø–æ–∑–Ω–∞—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ —Å –∏–º–µ–Ω–µ–º <b>{name}</b>! –ü–∏—à–∏ –≤ –ª—Å –∞–¥–º–∏–Ω–∞–º\n\n‚ö†Ô∏è–ü—Ä–æ–±–ª–µ–º–∞ –≤–æ–∑–º–æ–∂–Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –∏–∑-–∑–∞ –≤–∞—à–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏!", "html")
                await asyncio.sleep(20)
                await masage.delete()

def register_handlers(dp: Dispatcher):
    dp.register_channel_post_handler(getter, ChatTypeFilter(ChatType.CHANNEL), text_contains="–æ—Ç–ø—Ä–∞–≤–∏–ª(–∞)")
